CREATE SEQUENCE user_id_seq START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE complain_id_seq START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE operator_id_seq START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE manager_id_seq START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE lot_id_seq START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE spot_id_seq START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE booking_id_seq START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;
CREATE SEQUENCE transaction_id_seq START WITH 1 INCREMENT BY 1 NOCACHE NOCYCLE;


CREATE TABLE UserPSF (
    UserID NUMBER PRIMARY KEY,
    Name_Driver VARCHAR2(25) NOT NULL,
    Email VARCHAR2(255) UNIQUE NOT NULL,
    PhoneNumber VARCHAR2(20),
    Password VARCHAR2(100) NOT NULL
);

CREATE TABLE ComplainPSF (
    ComplainID NUMBER PRIMARY KEY,
    UserID NUMBER,
    Reason VARCHAR2(255),
    Query VARCHAR2(1000),
    CONSTRAINT fk_user_id FOREIGN KEY (UserID) REFERENCES UserPSF(UserID)
);

CREATE TABLE OperatorPSF (
    OperatorID NUMBER PRIMARY KEY,
    Operator_Name VARCHAR2(50) NOT NULL,
    Email VARCHAR2(255) UNIQUE NOT NULL,
    Phone_Number VARCHAR2(20),
    Password VARCHAR2(100) NOT NULL
);

CREATE TABLE ManagerPSF (
    ManagerID NUMBER PRIMARY KEY,
    Manager_Name VARCHAR2(50) NOT NULL,
    Email VARCHAR2(255) UNIQUE NOT NULL,
    Phone_Number VARCHAR2(20),
    Password VARCHAR2(100) NOT NULL
);

CREATE TABLE ParkingLotPSF (
    LotID NUMBER PRIMARY KEY,
    OperatorID NUMBER,
    Lot_Name VARCHAR2(100) NOT NULL,
    Address VARCHAR2(255) NOT NULL,
    Capacity NUMBER,
    HourlyRate NUMBER(10, 2),
    CONSTRAINT fk_operator_id FOREIGN KEY (OperatorID) REFERENCES OperatorPSF(OperatorID)
);

CREATE TABLE ParkingSpotPsf (
    SpotID NUMBER PRIMARY KEY,
    Lot_ID NUMBER,
    Spot_Number VARCHAR2(50) NOT NULL,
    CONSTRAINT fk_lot_id FOREIGN KEY (Lot_ID) REFERENCES ParkingLotPSF(LotID)
);

CREATE TABLE Booking (
    BookingID NUMBER PRIMARY KEY,
    UserID NUMBER,
    SpotID NUMBER,
    StartTime TIMESTAMP,
    EndTime TIMESTAMP,
    Status VARCHAR2(50),
    BookingDate DATE,
    PlateNumber VARCHAR2(20),
    CONSTRAINT fk_user_Driver_id FOREIGN KEY (UserID) REFERENCES UserPSF(UserID),
    CONSTRAINT fk_spot_id FOREIGN KEY (SpotID) REFERENCES ParkingSpotPsf(SpotID)
);

CREATE TABLE TransactionPSF (
    TransactionID NUMBER PRIMARY KEY,
    BookingID NUMBER,
    Total_Bill NUMBER(10, 2),
    Commission NUMBER(10, 2),
    Status VARCHAR2(50),
    TransactionDate DATE,
    CONSTRAINT fk_booking_id FOREIGN KEY (BookingID) REFERENCES Booking(BookingID)
);


CREATE OR REPLACE TRIGGER user_id_trigger
BEFORE INSERT ON UserPSF
FOR EACH ROW
BEGIN
    SELECT user_id_seq.NEXTVAL INTO :NEW.UserID FROM dual;
END;

CREATE OR REPLACE TRIGGER complain_id_trigger
BEFORE INSERT ON ComplainPSF
FOR EACH ROW
BEGIN
    SELECT complain_id_seq.NEXTVAL INTO :NEW.ComplainID FROM dual;
END;

CREATE OR REPLACE TRIGGER operator_id_trigger
BEFORE INSERT ON OperatorPSF
FOR EACH ROW
BEGIN
    SELECT operator_id_seq.NEXTVAL INTO :NEW.OperatorID FROM dual;
END;

CREATE OR REPLACE TRIGGER manager_id_trigger
BEFORE INSERT ON ManagerPSF
FOR EACH ROW
BEGIN
    SELECT manager_id_seq.NEXTVAL INTO :NEW.ManagerID FROM dual;
END;

CREATE OR REPLACE TRIGGER lot_id_trigger
BEFORE INSERT ON ParkingLotPSF
FOR EACH ROW
BEGIN
    SELECT lot_id_seq.NEXTVAL INTO :NEW.LotID FROM dual;
END;

CREATE OR REPLACE TRIGGER spot_id_trigger
BEFORE INSERT ON ParkingSpotPsf
FOR EACH ROW
BEGIN
    SELECT spot_id_seq.NEXTVAL INTO :NEW.SpotID FROM dual;
END;

CREATE OR REPLACE TRIGGER booking_id_trigger
BEFORE INSERT ON Booking
FOR EACH ROW
BEGIN
    SELECT booking_id_seq.NEXTVAL INTO :NEW.BookingID FROM dual;
END;

CREATE OR REPLACE TRIGGER transaction_id_trigger
BEFORE INSERT ON TransactionPSF
FOR EACH ROW
BEGIN
    SELECT transaction_id_seq.NEXTVAL INTO :NEW.TransactionID FROM dual;
END;
